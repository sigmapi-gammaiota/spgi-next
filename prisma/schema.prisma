// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String       @id @default(cuid())
  name                    String?
  email                   String?      @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  accounts                Account[]
  sessions                Session[]
  isValid                 Boolean? // Used for prototype checking in next-auth
  isAdmin                 Boolean      @default(false) // TODO: Is "isAdmin" different from the ADMIN role?
  roles                   String[] // See lib/RoleRouter.Roles for Role type
  partyGuestsAdded        PartyGuest[] @relation(name: "PartyGuestsAdded")
  partyGuestsUsingInvites PartyGuest[] @relation(name: "PartyGuestsUsingInvites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Party {
  id                 Int          @id @default(autoincrement())
  name               String
  startsAt           DateTime
  prepartyStartsAt   DateTime?
  maxInvites         Int?
  maxMaleInvites     Int?
  maxFemaleInvites   Int?
  maxPrepartyInvites Int?
  guests             PartyGuest[]
}

model PartyGuest {
  name              String
  addedAt           DateTime @default(now())
  gender            Gender
  isPreparty        Boolean  @default(false)
  wasVouchedFor     Boolean  @default(false)
  invitedToPartyId  Int
  invitedTo         Party    @relation(fields: [invitedToPartyId], references: [id])
  addedByUserId     String
  addedBy           User     @relation(name: "PartyGuestsAdded", fields: [addedByUserId], references: [id])
  usingInviteUserId String?
  usingInvite       User?    @relation(name: "PartyGuestsUsingInvites", fields: [usingInviteUserId], references: [id])

  @@id([name, invitedToPartyId])
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}
